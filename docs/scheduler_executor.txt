Interactions between scheduler/despatcher, updater and executor.

Despatch request:

The executor does not need to pass any specific information to the despatcher other than that it wants a job to do - it could pass timing constraint information but this should be taken care of by the scheduler's TimingConstraintsModel which the executor either supplies or contributes to.

Returned information includes:

 Identification information 
   - the executor needs the names of all owner objects - TAG, User, Program, Proposal as well as that of the Group.
 Sequence 
   - the actual structures and executive actions to perform.
 HistoryRef 
  - a reference to an execution history entry - this will be needed to identify this specific execution instance for this group when various phases of the sequence execution occur and need to be notified back to the ExecutionUpdateManager.

Updates:

A series of updates occur.

As each executive action completes it may need to be notified back - this primarily concerns exposure actions and generated image file names. 
A history entry is required so that the updater can associate these with it.

Information sent for each exposure update includes:

 Timestamp
   - when did the exposure start/end
 Exposure ID
   - The specific exposure action's ID - this more or less equates to the old observation-name - several exposure-history entries can have the same ExpID.
 File
   - The name/location of an image file generated by the exposure.
 HistoryRef
   - This is the reference to the history-entry generated by the scheduler/despatcher when the group was selected.

The final update on completion or abandonment of the group contains:

 Identification information
   - This time we actually want the IDs rather than the names of owner objects - specifically we need the groupID.
 Failure context
   - This can just be a code and message to explain what went wrong - why the group was abandoned.
 Resource consumption
   - A set of resource usage information - simply a resource name and amount used. This information can be associated to accounting information
by the updater - though we do not expect the updater to simply apply the resource usage directly to the accounts. An example usage would be the total
amount of time used, time used in dark conditions, poor seeing etc. The updater may store this info but will likely also want to compute costings based on
its own CostAccountingModel - ie we can store the actual times and the charged times as seperate accounts.


 

